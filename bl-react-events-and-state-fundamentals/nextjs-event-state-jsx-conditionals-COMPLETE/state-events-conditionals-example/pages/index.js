import { useState } from 'react'

import { MOVIE_LIST } from '../utils/movies'

import SimpleListItem from '../components/SimpleListItem'

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import Grid from '@mui/material/Grid';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';

import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';

export default function Home() {
  const [search, setSearch] = useState("")
  const [year, setYear] = useState("")
  const [movies, setMovies] = useState(MOVIE_LIST)
  const [errorMessage, setErrorMessage] = useState("")

  const handleSubmit = (event) => {
    {try {
      event.preventDefault()
      console.log(`year: ${year}`)
      console.log(`search: ${search}`)
      validateSearch()
      filterMovies()
    } catch (error) {
      console.error(error);
      setErrorMessage(error.message)
    }}
  }

  const isNumber = (value) => {
    return !isNaN(value)
  }

  const validateSearch = () => {
    console.log("validateSearch")
    console.log(isNumber(year))
    //if the year is empty
    if (year.trim().length === 0) {
      setErrorMessage("")
      return
    }
    if (year.trim().length !== 4) {
      throw new Error(`"${year}" is not 4 digits`)
    }
    const numericRegEx = /^[0-9]+$/
    if (!numericRegEx.test(year)) {
      throw new Error(`"${year}" has non numeric digits`)
    }
    const currentYear = new Date().getFullYear();
    if((year < 1920) || (year > currentYear)) {
      throw new Error(`"${year}" is not in the range 1920 to ${currentYear}`)
    }
    setErrorMessage("")
  }

  const filterMovies = () => {
    // make a copy of the movie list.
    let filteredMovieList = [...MOVIE_LIST]
    // check if the search is empty
    if (search.trim() !== ""){
      // loop through the movies and check if the name
      // includes the search value (both lower case)
      filteredMovieList = filteredMovieList.filter((movieData)=> {
       return movieData.name.toLowerCase().includes(search.trim().toLowerCase())
      })  
    }
    // check if the year is empty
    if (year.trim() !== ""){
      // loop through the movies and check if the year is the same as the 
      filteredMovieList = filteredMovieList.filter((movieData)=> {
       return movieData.year === parseInt(year.trim())
      })  
    }
    setMovies(filteredMovieList)
  }

  return (
    <div>
      <Head>
        <title>Our Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <main>
        <Container>
          <Typography variant="h2" component="h2" style={{textAlign: "center"}}>
            Movies
          </Typography>
          <form
            style={{width: '100%'}}
            onSubmit={handleSubmit}
          >
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  id="search-field"
                  label="search..."
                  variant="standard"
                  sx={{width: '100%'}}
                  onChange={(e)=> {setSearch(e.target.value)}}
                  value={search}
                />
              </Grid>
              <Grid item xs={4}>
                <TextField
                  id="year-field"
                  label="year"
                  variant="standard"
                  sx={{width: '100%'}}
                  onChange={(e)=> {setYear(e.target.value)}}
                  value={year}
                />
              </Grid>
              <Grid item xs={2}>
                <Button
                  type="submit"
                  variant="contained"
                >Filter</Button>
              </Grid>
              <Grid item xs={10}>
                {errorMessage !== "" &&
                  <Alert severity="error">{errorMessage}</Alert>
                }
              </Grid>
            </Grid>
          </form>
          <List sx={{width: `100%`}}>
            { movies.length === 0 &&
              <SimpleListItem text=" No results please search again." />
            }
            { movies.length === 0 ?
              <SimpleListItem text=" No results please search again." />
              :
              <SimpleListItem text={`${movies.length} movie results`} />
            }
            { movies.map((movieData, index)=> {
                return (
                <SimpleListItem
                  key={index}
                  text={`${movieData.name} (${movieData.year})`}
                />
                )
              })
            }
          </List>
        </Container>
      </main>
    </div>
  )
}
